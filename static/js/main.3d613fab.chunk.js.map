{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","text","emojiText","emoji","getUnicode","onClick","onDeleteCard","id","EMOJI_LIST","NewCardForm","emojiList","map","singleEmoji","push","value","useState","formFields","setFormFields","onFormChange","event","target","name","newFields","onSubmit","preventDefault","onAddCard","onChange","type","Board","cards","setCards","errorMessage","setErrorMessage","useEffect","axios","get","url","boardName","then","res","apiCards","data","catch","err","message","deleteCard","newCards","filter","singleCard","card","length","delete","cardComponents","post","updatedData","App","boardList","setBoardList","currentBoard","setCurrentBoard","apiBoards","singleBoard","board","boardNames","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3d613fab.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\n\nimport './Card.css';\n\n\nconst Card = (props) => {\n  return (\n    <div className=\"card\">\n      <section className=\"card__content\">\n        <p className=\"card__content-text\">{props.text}</p>\n        <p className=\"card__content-emoji\">{props.emojiText ? emoji.getUnicode(`${props.emojiText}`) : ''}</p>\n      </section>\n      <button  className = \"card__delete\" onClick={() => props.onDeleteCard(props.id)}>\n        Delete\n      </button>\n    </div>    \n  )\n}\n\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string,\n  emojiText: PropTypes.string,\n  onDeleteCard: PropTypes.func.isRequired\n};\n\nexport default Card;\n","import React, { useState} from 'react';\nimport PropTypes from 'prop-types';\nimport emoji from 'emoji-dictionary';\nimport './NewCardForm.css';\n\nconst EMOJI_LIST = [\" \", \"heart_eyes\", \"beer\", \"clap\", \"sparkling_heart\", \"heart_eyes_cat\", \"dog\"]\n\nconst NewCardForm = (props) => {\n\n  const emojiList = []\n    \n  EMOJI_LIST.map(singleEmoji => \n    emojiList.push(<option value={singleEmoji}> {emoji.getUnicode(`${singleEmoji}`)} </option>)\n  )\n  \n  const [formFields, setFormFields] = useState({\n    text: '',\n    emoji: '',\n  });\n\n  const onFormChange = (event) => {\n    const {name, value} = event.target\n\n    const newFields = {\n      ...formFields\n    }\n\n    newFields[name] = value\n    setFormFields(newFields)\n  }\n\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n\n    props.onAddCard(formFields)\n\n    setFormFields({\n      text: '',\n      emoji: '',\n    })\n  }\n\n  return (\n    <form className='new-card-form' onSubmit={onFormSubmit}>\n      <p className='new-card-form__header'>Submit a Card to the Current Board!</p>\n      <div className='new-card-form__form'>\n        <label className='new-card-form__form-label'>\n          Text:\n          <textarea \n            value={formFields.text} \n            name='text' \n            onChange={onFormChange} \n            className='new-card-form__form-textarea'\n          />\n        </label>\n      </div>\n\n      <div className='new-card-form__form'>\n        <label className='new-card-form__form-label'>\n          Emoji\n          <select value={formFields.emoji} name='emoji' onChange={onFormChange} className='new-card-form__form-select' >\n            {emojiList}\n          </select>\n        </label>\n      </div>\n      <input\n        type=\"submit\"\n        value=\"Add Card\"\n        className='new-card-form__form-button'\n      />\n    </form>\n\n  )\n}\n\nNewCardForm.propTypes = {\n  onAddCard: PropTypes.func.isRequired\n}\n\nexport default NewCardForm;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport './Board.css';\nimport Card from './Card';\nimport NewCardForm from './NewCardForm';\n// import CARD_DATA from '../data/card-data.json';\n\nconst API_CARDS_URL = 'https://inspiration-board.herokuapp.com/cards'\n\nconst Board = (props) => {\n  \n\n  const [cards, setCards] = useState([])\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  \n  useEffect(() => {\n    axios.get(`${props.url}${props.boardName}/cards`)\n      .then((res) => {\n        const apiCards = res.data;\n        setCards(apiCards)\n      })\n      .catch((err) => {\n        setErrorMessage(err.message);\n      });\n  }, [props.boardName]);\n\n  const deleteCard = (id) => {\n    \n    const newCards = cards.filter((singleCard) => {\n      return singleCard.card.id !== id;\n    })\n\n    // not going into this conditional because the newCards length is the same as the cards length \n    // the DS is a layer deeper than I thought, it's singleCard.card.id not card.id\n    if (newCards.length < cards.length) {\n      axios.delete(`${API_CARDS_URL}/${id}`)\n      .then(() => {\n        setErrorMessage(`Card #${id} deleted!`)\n      })\n      .catch(() => {\n        setErrorMessage(`Unable to delete card #${id}`)\n      })\n      setCards(newCards)\n    }\n  }\n\n  const cardComponents = cards.map(singleCard => {\n    return (\n      <Card \n        key={singleCard.card.id}\n        id={singleCard.card.id}\n        text={singleCard.card.text} \n        emojiText={singleCard.card.emoji}\n        onDeleteCard={deleteCard}\n      />\n    )\n  })\n\n  const addCard = (card) => {\n   \n    axios.post(`${props.url}${props.boardName}/cards`, card)\n      .then((res) => {\n        const updatedData = [...cards, res.data];\n        setCards(updatedData)\n        setErrorMessage('')\n      })\n      .catch(() => {\n        setErrorMessage(errorMessage)\n      });\n  }\n\n\n  return (\n    <>\n    <NewCardForm onAddCard={addCard}/>\n    <div className=\"board\">\n      {cardComponents}\n    </div>\n    </>\n  )\n};\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired\n};\n\nexport default Board;\n","import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport Board from './components/Board';\n// import emoji from 'emoji-dictionary';\nimport axios from 'axios';\n\n\n\nconst App = () => {\n\n  const [boardList, setBoardList] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [currentBoard, setCurrentBoard] = useState('tram-bui')\n\n  useEffect(() => {\n    axios.get('https://inspiration-board.herokuapp.com/boards')\n      .then((res) => {\n        // res.data = array of objects\n        const apiBoards = []\n        \n        res.data.map(singleBoard => {\n          apiBoards.push(singleBoard.board)\n        })\n       \n        setBoardList(apiBoards)\n      })\n      .catch((err) => {\n        setErrorMessage(err.message);\n      });\n  }, []);\n\n  const boardNames = [];\n  boardList.map(board => \n    boardNames.push(<option value={board.name}> {board.name} </option>)\n  )\n\n  const switchBoard = (event) => {\n    event.preventDefault();\n\n    setCurrentBoard(event.target.value)\n  }\n\n  useEffect(() => {\n\n  }, [currentBoard])\n\n\n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\"><span className=\"header__text\"> Inspiration Board</span></h1>\n      </header>\n      <form className='new-board'>\n        <label>Current Board:</label>\n        <select value={currentBoard} onChange={switchBoard}>\n          {boardNames}\n        </select>\n      </form>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/boards/\"\n        boardName={currentBoard}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}